basePath: /api/v1
definitions:
  todolist_internal_domain_todo_valueobject.TodoStatistics:
    properties:
      byPriority:
        additionalProperties:
          type: integer
        type: object
      byStatus:
        additionalProperties:
          type: integer
        type: object
      completedToday:
        type: integer
      completionRate:
        type: number
      dueThisWeek:
        type: integer
      dueToday:
        type: integer
      overdue:
        type: integer
      total:
        type: integer
    type: object
  todolist_internal_dto.AuthRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  todolist_internal_dto.AuthResponse:
    properties:
      expires_at:
        type: string
      refresh_expires_at:
        type: string
      refresh_token:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/todolist_internal_dto.UserResponse'
    type: object
  todolist_internal_dto.ChangePasswordRequest:
    properties:
      new_password:
        minLength: 8
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  todolist_internal_dto.CreatePersonRequest:
    properties:
      birth_date:
        type: string
      email:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      phone:
        maxLength: 20
        minLength: 11
        type: string
      tax_id:
        maxLength: 14
        minLength: 11
        type: string
    required:
    - email
    - name
    - tax_id
    type: object
  todolist_internal_dto.CreateTodoRequest:
    properties:
      description:
        maxLength: 1000
        type: string
      due_date:
        type: string
      priority:
        enum:
        - low
        - medium
        - high
        - critical
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        maxLength: 200
        minLength: 3
        type: string
    required:
    - priority
    - title
    type: object
  todolist_internal_dto.CreateUserRequest:
    properties:
      password:
        minLength: 8
        type: string
      person:
        $ref: '#/definitions/todolist_internal_dto.CreatePersonRequest'
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - person
    - username
    type: object
  todolist_internal_dto.ErrorInfo:
    properties:
      code:
        example: VALIDATION_ERROR
        type: string
      details:
        additionalProperties: {}
        type: object
      message:
        example: Invalid input data
        type: string
    type: object
  todolist_internal_dto.PaginatedResponse:
    properties:
      data: {}
      pagination:
        $ref: '#/definitions/todolist_internal_dto.Pagination'
      success:
        example: true
        type: boolean
    type: object
  todolist_internal_dto.Pagination:
    properties:
      page:
        example: 1
        type: integer
      page_size:
        example: 20
        type: integer
      total:
        example: 100
        type: integer
      total_pages:
        example: 5
        type: integer
    type: object
  todolist_internal_dto.PersonInfo:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  todolist_internal_dto.PersonResponse:
    properties:
      birth_date:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      tax_id:
        type: string
      updated_at:
        type: string
    type: object
  todolist_internal_dto.Response:
    properties:
      data: {}
      error:
        $ref: '#/definitions/todolist_internal_dto.ErrorInfo'
      message:
        example: Operation successful
        type: string
      success:
        example: true
        type: boolean
    type: object
  todolist_internal_dto.TodoResponse:
    properties:
      completed_at:
        type: string
      created_at:
        type: string
      description:
        type: string
      due_date:
        type: string
      id:
        type: integer
      is_overdue:
        type: boolean
      priority:
        type: string
      status:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  todolist_internal_dto.UpdatePersonRequest:
    properties:
      email:
        type: string
      phone:
        maxLength: 20
        minLength: 11
        type: string
    type: object
  todolist_internal_dto.UpdateTodoRequest:
    properties:
      description:
        maxLength: 1000
        type: string
      due_date:
        type: string
      priority:
        enum:
        - low
        - medium
        - high
        - critical
        type: string
      status:
        enum:
        - pending
        - in_progress
        - completed
        - cancelled
        type: string
      title:
        maxLength: 200
        minLength: 3
        type: string
    type: object
  todolist_internal_dto.UserResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      person:
        $ref: '#/definitions/todolist_internal_dto.PersonInfo'
      person_id:
        type: integer
      role:
        type: string
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: soge@fibralink.net.br
    name: API Support
    url: https://fibralink.net.br
  description: A simple Todo List application example
  title: Todo List API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and get access token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/todolist_internal_dto.AuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/todolist_internal_dto.Response'
            - properties:
                data:
                  $ref: '#/definitions/todolist_internal_dto.AuthResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
      summary: Login user
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/todolist_internal_dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/todolist_internal_dto.Response'
            - properties:
                data:
                  $ref: '#/definitions/todolist_internal_dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
      summary: Register a new user
      tags:
      - auth
  /api/v1/people:
    post:
      consumes:
      - application/json
      description: Create a new person record
      parameters:
      - description: Person data
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/todolist_internal_dto.CreatePersonRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/todolist_internal_dto.Response'
            - properties:
                data:
                  $ref: '#/definitions/todolist_internal_dto.PersonResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
      summary: Create a new person
      tags:
      - people
  /api/v1/people/{id}:
    get:
      consumes:
      - application/json
      description: Get person details by ID
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/todolist_internal_dto.Response'
            - properties:
                data:
                  $ref: '#/definitions/todolist_internal_dto.PersonResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
      security:
      - BearerAuth: []
      summary: Get person by ID
      tags:
      - people
    put:
      consumes:
      - application/json
      description: Update person details
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: string
      - description: Person data
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/todolist_internal_dto.UpdatePersonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/todolist_internal_dto.Response'
            - properties:
                data:
                  $ref: '#/definitions/todolist_internal_dto.PersonResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
      security:
      - BearerAuth: []
      summary: Update person
      tags:
      - people
  /api/v1/todos:
    get:
      consumes:
      - application/json
      description: List todos with filters and pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Page size
        in: query
        name: page_size
        type: integer
      - collectionFormat: csv
        description: Filter by status
        in: query
        items:
          enum:
          - pending
          - in_progress
          - completed
          - cancelled
          type: string
        name: status
        type: array
      - collectionFormat: csv
        description: Filter by priority
        in: query
        items:
          enum:
          - low
          - medium
          - high
          - critical
          type: string
        name: priority
        type: array
      - collectionFormat: csv
        description: Filter by tags
        in: query
        items:
          type: string
        name: tags
        type: array
      - description: Search in title and description
        in: query
        name: search
        type: string
      - description: Filter overdue todos
        in: query
        name: is_overdue
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/todolist_internal_dto.PaginatedResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/todolist_internal_dto.TodoResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
      security:
      - BearerAuth: []
      summary: List todos
      tags:
      - todos
    post:
      consumes:
      - application/json
      description: Create a new todo item
      parameters:
      - description: Todo data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/todolist_internal_dto.CreateTodoRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/todolist_internal_dto.Response'
            - properties:
                data:
                  $ref: '#/definitions/todolist_internal_dto.TodoResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
      security:
      - BearerAuth: []
      summary: Create a new todo
      tags:
      - todos
  /api/v1/todos/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a todo item
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
      security:
      - BearerAuth: []
      summary: Delete todo
      tags:
      - todos
    get:
      consumes:
      - application/json
      description: Get todo details by ID
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/todolist_internal_dto.Response'
            - properties:
                data:
                  $ref: '#/definitions/todolist_internal_dto.TodoResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
      security:
      - BearerAuth: []
      summary: Get todo by ID
      tags:
      - todos
    put:
      consumes:
      - application/json
      description: Update todo details
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      - description: Todo data
        in: body
        name: todo
        required: true
        schema:
          $ref: '#/definitions/todolist_internal_dto.UpdateTodoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/todolist_internal_dto.Response'
            - properties:
                data:
                  $ref: '#/definitions/todolist_internal_dto.TodoResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
      security:
      - BearerAuth: []
      summary: Update todo
      tags:
      - todos
  /api/v1/todos/{id}/complete:
    put:
      consumes:
      - application/json
      description: Mark todo as completed
      parameters:
      - description: Todo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/todolist_internal_dto.Response'
            - properties:
                data:
                  $ref: '#/definitions/todolist_internal_dto.TodoResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
      security:
      - BearerAuth: []
      summary: Complete todo
      tags:
      - todos
  /api/v1/todos/statistics:
    get:
      consumes:
      - application/json
      description: Get todo statistics for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/todolist_internal_dto.Response'
            - properties:
                data:
                  $ref: '#/definitions/todolist_internal_domain_todo_valueobject.TodoStatistics'
              type: object
      security:
      - BearerAuth: []
      summary: Get todo statistics
      tags:
      - todos
  /api/v1/users/password:
    put:
      consumes:
      - application/json
      description: Change user password
      parameters:
      - description: Password change data
        in: body
        name: passwords
        required: true
        schema:
          $ref: '#/definitions/todolist_internal_dto.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/todolist_internal_dto.Response'
      security:
      - BearerAuth: []
      summary: Change password
      tags:
      - auth
swagger: "2.0"
