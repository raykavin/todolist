package model

import (
	"ecommerce/internal/domain/shared/valueobjects"
	"ecommerce/internal/domain/user/entity"
	"strconv"
	"time"
)

// User represents the GORM model for a user.
type User struct {
	ID        uint      `gorm:"primaryKey"`
	FirstName string    `gorm:"not null"`
	LastName  string    `gorm:"not null"`
	Email     string    `gorm:"uniqueIndex;not null"`
	Password  string    `gorm:"not null"`
	Role      string    `gorm:"default:'customer'"`
	CreatedAt time.Time `gorm:"autoCreateTime"`
	UpdatedAt time.Time `gorm:"autoUpdateTime"`
}

// ToDomain converts a GORM User model to a domain User entity.
func (m *User) ToDomain() (*entity.User, error) {
	id, err := valueobjects.IDFromString(strconv.FormatUint(uint64(m.ID), 10))
	if err != nil {
		// This should not happen if the ID from the database is always a valid uint.
		// However, for the sake of robustness, we create a new ID.
		id = valueobjects.NewID()
	}

	user, err := entity.NewUser(
		id,
		m.FirstName,
		m.LastName,
		m.Email,
		m.Password,
		entity.Role(m.Role),
	)
	if err != nil {
		return nil, err
	}
	return user, nil
}

// FromDomain converts a domain User entity to a GORM User model.
func FromDomain(d *entity.User) *User {
	// The ID is ignored here because it's auto-generated by the database.
	return &User{
		FirstName: d.FirstName(),
		LastName:  d.LastName(),
		Email:     d.Email(),
		Password:  d.Password(),
		Role:      string(d.Role()),
		CreatedAt: d.CreatedAt(),
		UpdatedAt: d.UpdatedAt(),
	}
}
